//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "1.12 stable mappings"!

package me.fluffycq.icehack.module.modules.exploit;

import com.google.common.collect.Lists;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.Map;
import me.fluffycq.icehack.events.Render3DEvent;
import me.fluffycq.icehack.events.RenderEvent;
import me.fluffycq.icehack.message.Messages;
import me.fluffycq.icehack.module.Category;
import me.fluffycq.icehack.module.Module;
import me.fluffycq.icehack.setting.Setting;
import me.fluffycq.icehack.util.BoundingSpot;
import me.fluffycq.icehack.util.ICERenderer;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityMinecartContainer;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntityLockableLoot;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.World;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import org.lwjgl.opengl.GL11;

public class EGapFinder extends Module {
  protected static void writeToFile(double paramDouble1, double paramDouble2, double paramDouble3, String paramString1, String paramString2) {
    if (!sent.contains(paramString1)) {
      File file1 = new File((Minecraft.getMinecraft()).gameDir.getAbsolutePath(), String.valueOf((new StringBuilder()).append(File.separator).append("ICEHack").append(File.separator).append("EGapFinder")));
      if (!file1.exists())
        file1.mkdir(); 
      File file2 = new File((Minecraft.getMinecraft()).gameDir.getAbsolutePath(), String.valueOf((new StringBuilder()).append(File.separator).append("ICEHack").append(File.separator).append("EGapFinder").append(File.separator).append("EGaps.txt")));
      if (!file2.exists())
        try {
          file2.createNewFile();
        } catch (IOException iOException) {
          iOException.printStackTrace();
        }  
      File file3 = new File((Minecraft.getMinecraft()).gameDir.getAbsolutePath(), String.valueOf((new StringBuilder()).append(File.separator).append("ICEHack").append(File.separator).append("EGapFinder").append(File.separator).append("Books.txt")));
      if (!file3.exists())
        try {
          file3.createNewFile();
        } catch (IOException iOException) {
          iOException.printStackTrace();
        }  
      File file4 = new File((Minecraft.getMinecraft()).gameDir.getAbsolutePath(), String.valueOf((new StringBuilder()).append(File.separator).append("ICEHack").append(File.separator).append("EGapFinder").append(File.separator).append("Crapples.txt")));
      if (!file4.exists())
        try {
          file4.createNewFile();
        } catch (IOException iOException) {
          iOException.printStackTrace();
        }  
      File file5 = new File((Minecraft.getMinecraft()).gameDir.getAbsolutePath(), String.valueOf((new StringBuilder()).append(File.separator).append("ICEHack").append(File.separator).append("EGapFinder").append(File.separator).append("Mending.txt")));
      if (!file5.exists())
        try {
          file5.createNewFile();
        } catch (IOException iOException) {
          iOException.printStackTrace();
        }  
      String str = "";
      if (paramString1.contains("Book"))
        str = String.valueOf((new StringBuilder()).append((Minecraft.getMinecraft()).gameDir.getAbsolutePath()).append(File.separator).append("ICEHack").append(File.separator).append("EGapFinder").append(File.separator).append("Books.txt")); 
      if (paramString1.contains("ench gapple"))
        str = String.valueOf((new StringBuilder()).append((Minecraft.getMinecraft()).gameDir.getAbsolutePath()).append(File.separator).append("ICEHack").append(File.separator).append("EGapFinder").append(File.separator).append("EGaps.txt")); 
      if (paramString1.contains("crapple"))
        str = String.valueOf((new StringBuilder()).append((Minecraft.getMinecraft()).gameDir.getAbsolutePath()).append(File.separator).append("ICEHack").append(File.separator).append("EGapFinder").append(File.separator).append("Crapples.txt")); 
      if (paramString1.contains("Mending"))
        str = String.valueOf((new StringBuilder()).append((Minecraft.getMinecraft()).gameDir.getAbsolutePath()).append(File.separator).append("ICEHack").append(File.separator).append("EGapFinder").append(File.separator).append("Mending.txt")); 
      try(FileWriter null = new FileWriter(str, true); BufferedWriter null = new BufferedWriter(fileWriter); PrintWriter null = new PrintWriter(bufferedWriter)) {
        printWriter.println(paramString1);
      } catch (IOException iOException) {}
      Messages.sendChatMessage(paramString1);
      sent.add(paramString1);
      boxes.add(new BoundingSpot(paramDouble1, paramDouble2, paramDouble3, paramString2));
    } 
  }
  
  public EGapFinder() {
    super("EGapFinder", 0, Category.EXPLOITS);
    this.renderEvent = new Listener(paramRender3DEvent -> {
          if (this.waypoints.getValBoolean())
            try {
              for (BoundingSpot boundingSpot : boxes)
                ICERenderer.logoutBox(boundingSpot.x - 0.25D, boundingSpot.y, boundingSpot.z - 0.25D, boundingSpot.x + 0.25D, boundingSpot.y + 2.0D, boundingSpot.z + 0.25D, Color.red); 
            } catch (ConcurrentModificationException concurrentModificationException) {
              concurrentModificationException.printStackTrace();
            }  
        }new java.util.function.Predicate[0]);
    this.egaps = new Setting("EGaps", this, true);
    this.mending = new Setting("Mending", this, true);
    this.prot = new Setting("Prot", this, true);
    this.bprot = new Setting("BProt", this, true);
    this.feather = new Setting("Feather", this, true);
    this.unb = new Setting("Unb", this, true);
    this.effi = new Setting("Effi", this, true);
    this.sharp = new Setting("Sharp", this, true);
    this.books = new Setting("All Books", this, false);
    this.crapples = new Setting("Crapples", this, false);
    this.waypoints = new Setting("Waypoints", this, true);
    this.tracers = new Setting("Tracers", this, true);
    this.clearrange = new Setting("ClearRange", this, 4.0D, 1.0D, 40.0D, true);
  }
  
  public void onWorldTick(TickEvent.WorldTickEvent paramWorldTickEvent) {
    if (paramWorldTickEvent.world == null || paramWorldTickEvent.world.loadedTileEntityList == null || paramWorldTickEvent.world.loadedEntityList == null) {
      disable();
      return;
    } 
    World world = paramWorldTickEvent.world;
    EntityPlayer entityPlayer = null;
    if (!world.loadedTileEntityList.isEmpty()) {
      entityPlayer = world.playerEntities.get(0);
      for (TileEntity tileEntity : world.loadedTileEntityList) {
        if (tileEntity instanceof TileEntityLockableLoot) {
          TileEntityLockableLoot tileEntityLockableLoot = (TileEntityLockableLoot)tileEntity;
          if (tileEntityLockableLoot.getLootTable() != null) {
            tileEntityLockableLoot.fillWithLoot(entityPlayer);
            for (byte b = 0; b < tileEntityLockableLoot.getSizeInventory(); b++) {
              ItemStack itemStack = tileEntityLockableLoot.getStackInSlot(b);
              if (itemStack.getItem() == Items.GOLDEN_APPLE)
                if (itemStack.getItemDamage() == 1) {
                  if (this.egaps.getValBoolean())
                    writeToFile(tileEntityLockableLoot.getPos().getX(), tileEntityLockableLoot.getPos().getY(), tileEntityLockableLoot.getPos().getZ(), String.valueOf((new StringBuilder()).append("Dungeon Chest with ench gapple at: ").append(tileEntityLockableLoot.getPos().getX()).append(" ").append(tileEntityLockableLoot.getPos().getY()).append(" ").append(tileEntityLockableLoot.getPos().getZ())), "EGap"); 
                } else if (itemStack.getItemDamage() != 1 && this.crapples.getValBoolean()) {
                  writeToFile(tileEntityLockableLoot.getPos().getX(), tileEntityLockableLoot.getPos().getY(), tileEntityLockableLoot.getPos().getZ(), String.valueOf((new StringBuilder()).append("Dungeon Chest with crapple at: ").append(tileEntityLockableLoot.getPos().getX()).append(" ").append(tileEntityLockableLoot.getPos().getY()).append(" ").append(tileEntityLockableLoot.getPos().getZ())), "Crapple");
                }  
              if (itemStack.getItem() == Items.ENCHANTED_BOOK && EnchantmentHelper.getEnchantments(itemStack) != null) {
                ArrayList<String> arrayList = new ArrayList();
                for (Map.Entry entry : EnchantmentHelper.getEnchantments(itemStack).entrySet()) {
                  Enchantment enchantment = (Enchantment)entry.getKey();
                  Integer integer = (Integer)entry.getValue();
                  arrayList.add(enchantment.getTranslatedName(integer.intValue()));
                } 
                String str = "";
                for (String str1 : arrayList) {
                  if (arrayList.indexOf(str1) != arrayList.size() - 1) {
                    str = String.valueOf((new StringBuilder()).append(str).append(str1).append(", "));
                    continue;
                  } 
                  str = String.valueOf((new StringBuilder()).append(str).append(str1));
                } 
                if (this.mending.getValBoolean() && str.contains("Mending"))
                  writeToFile(tileEntityLockableLoot.getPos().getX(), tileEntityLockableLoot.getPos().getY(), tileEntityLockableLoot.getPos().getZ(), String.valueOf((new StringBuilder()).append("Dungeon Chest with Mending at: ").append(tileEntityLockableLoot.getPos().getX()).append(" ").append(tileEntityLockableLoot.getPos().getY()).append(" ").append(tileEntityLockableLoot.getPos().getZ())), "Mending"); 
                if (this.prot.getValBoolean() && str.contains("Protection IV"))
                  writeToFile(tileEntityLockableLoot.getPos().getX(), tileEntityLockableLoot.getPos().getY(), tileEntityLockableLoot.getPos().getZ(), String.valueOf((new StringBuilder()).append("Dungeon Chest with Prot 4 Book at: ").append(tileEntityLockableLoot.getPos().getX()).append(" ").append(tileEntityLockableLoot.getPos().getY()).append(" ").append(tileEntityLockableLoot.getPos().getZ())), str); 
                if (this.bprot.getValBoolean() && str.contains("Blast Protection IV"))
                  writeToFile(tileEntityLockableLoot.getPos().getX(), tileEntityLockableLoot.getPos().getY(), tileEntityLockableLoot.getPos().getZ(), String.valueOf((new StringBuilder()).append("Dungeon Chest with Blast Prot 4 Book at: ").append(tileEntityLockableLoot.getPos().getX()).append(" ").append(tileEntityLockableLoot.getPos().getY()).append(" ").append(tileEntityLockableLoot.getPos().getZ())), str); 
                if (this.unb.getValBoolean() && str.contains("Unbreaking III"))
                  writeToFile(tileEntityLockableLoot.getPos().getX(), tileEntityLockableLoot.getPos().getY(), tileEntityLockableLoot.getPos().getZ(), String.valueOf((new StringBuilder()).append("Dungeon Chest with Unbreaking 3 Book at: ").append(tileEntityLockableLoot.getPos().getX()).append(" ").append(tileEntityLockableLoot.getPos().getY()).append(" ").append(tileEntityLockableLoot.getPos().getZ())), str); 
                if (this.feather.getValBoolean() && str.contains("Feather Falling IV"))
                  writeToFile(tileEntityLockableLoot.getPos().getX(), tileEntityLockableLoot.getPos().getY(), tileEntityLockableLoot.getPos().getZ(), String.valueOf((new StringBuilder()).append("Dungeon Chest with Feather Falling 4 Book at: ").append(tileEntityLockableLoot.getPos().getX()).append(" ").append(tileEntityLockableLoot.getPos().getY()).append(" ").append(tileEntityLockableLoot.getPos().getZ())), str); 
                if (this.effi.getValBoolean() && (str.contains("Efficiency IV") || str.contains("Efficiency V")))
                  writeToFile(tileEntityLockableLoot.getPos().getX(), tileEntityLockableLoot.getPos().getY(), tileEntityLockableLoot.getPos().getZ(), String.valueOf((new StringBuilder()).append("Dungeon Chest with Efficiency Book at: ").append(tileEntityLockableLoot.getPos().getX()).append(" ").append(tileEntityLockableLoot.getPos().getY()).append(" ").append(tileEntityLockableLoot.getPos().getZ())), str); 
                if (this.sharp.getValBoolean() && (str.contains("Sharpness IV") || str.contains("Sharpness V")))
                  writeToFile(tileEntityLockableLoot.getPos().getX(), tileEntityLockableLoot.getPos().getY(), tileEntityLockableLoot.getPos().getZ(), String.valueOf((new StringBuilder()).append("Dungeon Chest with Sharpness Book at: ").append(tileEntityLockableLoot.getPos().getX()).append(" ").append(tileEntityLockableLoot.getPos().getY()).append(" ").append(tileEntityLockableLoot.getPos().getZ())), str); 
                if (this.books.getValBoolean())
                  writeToFile(tileEntityLockableLoot.getPos().getX(), tileEntityLockableLoot.getPos().getY(), tileEntityLockableLoot.getPos().getZ(), String.valueOf((new StringBuilder()).append("Dungeon Chest with Enchanted Book [").append(str).append("]: ").append(tileEntityLockableLoot.getPos().getX()).append(" ").append(tileEntityLockableLoot.getPos().getY()).append(" ").append(tileEntityLockableLoot.getPos().getZ())), str); 
              } 
            } 
          } 
        } 
      } 
      for (Entity entity : world.loadedEntityList) {
        if (entity instanceof EntityMinecartContainer) {
          EntityMinecartContainer entityMinecartContainer = (EntityMinecartContainer)entity;
          if (entityMinecartContainer.getLootTable() != null) {
            entityMinecartContainer.addLoot(entityPlayer);
            for (byte b = 0; b < entityMinecartContainer.itemHandler.getSlots(); b++) {
              ItemStack itemStack = entityMinecartContainer.itemHandler.getStackInSlot(b);
              if (itemStack.getItem() == Items.GOLDEN_APPLE)
                if (itemStack.getItemDamage() == 1) {
                  if (this.egaps.getValBoolean())
                    writeToFile(entityMinecartContainer.posX, entityMinecartContainer.posY, entityMinecartContainer.posZ, String.valueOf((new StringBuilder()).append("Minecart with ench gapple at: ").append(entityMinecartContainer.posX).append(" ").append(entityMinecartContainer.posY).append(" ").append(entityMinecartContainer.posZ)), "EGap"); 
                } else if (itemStack.getItemDamage() != 1 && this.crapples.getValBoolean()) {
                  writeToFile(entityMinecartContainer.posX, entityMinecartContainer.posY, entityMinecartContainer.posZ, String.valueOf((new StringBuilder()).append("Minecart with crapple at: ").append(entityMinecartContainer.posX).append(" ").append(entityMinecartContainer.posY).append(" ").append(entityMinecartContainer.posZ)), "Crapple");
                }  
              if (itemStack.getItem() == Items.ENCHANTED_BOOK && this.books.getValBoolean() && EnchantmentHelper.getEnchantments(itemStack) != null) {
                ArrayList<String> arrayList = new ArrayList();
                for (Map.Entry entry : EnchantmentHelper.getEnchantments(itemStack).entrySet()) {
                  Enchantment enchantment = (Enchantment)entry.getKey();
                  Integer integer = (Integer)entry.getValue();
                  arrayList.add(enchantment.getTranslatedName(integer.intValue()));
                } 
                String str = "";
                for (String str1 : arrayList) {
                  if (arrayList.indexOf(str1) != arrayList.size() - 1) {
                    str = String.valueOf((new StringBuilder()).append(str).append(str1).append(", "));
                    continue;
                  } 
                  str = String.valueOf((new StringBuilder()).append(str).append(str1));
                } 
                if (this.mending.getValBoolean() && str.contains("Mending"))
                  writeToFile(entityMinecartContainer.posX, entityMinecartContainer.posY, entityMinecartContainer.posZ, String.valueOf((new StringBuilder()).append("Minecart with Mending at: ").append(entityMinecartContainer.posX).append(" ").append(entityMinecartContainer.posY).append(" ").append(entityMinecartContainer.posZ)), "Mending"); 
                if (this.prot.getValBoolean() && str.contains("Protection IV"))
                  writeToFile(entityMinecartContainer.posX, entityMinecartContainer.posY, entityMinecartContainer.posZ, String.valueOf((new StringBuilder()).append("Minecart with Prot 4 Book at: ").append(entityMinecartContainer.posX).append(" ").append(entityMinecartContainer.posY).append(" ").append(entityMinecartContainer.posZ)), str); 
                if (this.bprot.getValBoolean() && str.contains("Blast Protection IV"))
                  writeToFile(entityMinecartContainer.posX, entityMinecartContainer.posY, entityMinecartContainer.posZ, String.valueOf((new StringBuilder()).append("Minecart with Blast Prot 4 Book at: ").append(entityMinecartContainer.posX).append(" ").append(entityMinecartContainer.posY).append(" ").append(entityMinecartContainer.posZ)), str); 
                if (this.unb.getValBoolean() && str.contains("Unbreaking III"))
                  writeToFile(entityMinecartContainer.posX, entityMinecartContainer.posY, entityMinecartContainer.posZ, String.valueOf((new StringBuilder()).append("Minecart with Unbreaking 3 Book at: ").append(entityMinecartContainer.posX).append(" ").append(entityMinecartContainer.posY).append(" ").append(entityMinecartContainer.posZ)), str); 
                if (this.feather.getValBoolean() && str.contains("Feather Falling IV"))
                  writeToFile(entityMinecartContainer.posX, entityMinecartContainer.posY, entityMinecartContainer.posZ, String.valueOf((new StringBuilder()).append("Minecart with Feather Falling 4 Book at: ").append(entityMinecartContainer.posX).append(" ").append(entityMinecartContainer.posY).append(" ").append(entityMinecartContainer.posZ)), str); 
                if (this.effi.getValBoolean() && (str.contains("Efficiency IV") || str.contains("Efficiency V")))
                  writeToFile(entityMinecartContainer.posX, entityMinecartContainer.posY, entityMinecartContainer.posZ, String.valueOf((new StringBuilder()).append("Minecart with Efficiency Book at: ").append(entityMinecartContainer.posX).append(" ").append(entityMinecartContainer.posY).append(" ").append(entityMinecartContainer.posZ)), str); 
                if (this.sharp.getValBoolean() && (str.contains("Sharpness IV") || str.contains("Sharpness V")))
                  writeToFile(entityMinecartContainer.posX, entityMinecartContainer.posY, entityMinecartContainer.posZ, String.valueOf((new StringBuilder()).append("Minecart with Sharpness Book at: ").append(entityMinecartContainer.posX).append(" ").append(entityMinecartContainer.posY).append(" ").append(entityMinecartContainer.posZ)), str); 
                if (this.books.getValBoolean())
                  writeToFile(entityMinecartContainer.posX, entityMinecartContainer.posY, entityMinecartContainer.posZ, String.valueOf((new StringBuilder()).append("Minecart with Enchanted Book [").append(str).append("]: ").append(entityMinecartContainer.posX).append(" ").append(entityMinecartContainer.posY).append(" ").append(entityMinecartContainer.posZ)), str); 
              } 
            } 
          } 
        } 
      } 
    } 
  }
  
  public static void drawLine(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4) {
    Vec3d vec3d = (new Vec3d(0.0D, 0.0D, 1.0D)).rotatePitch(-((float)Math.toRadians((Minecraft.getMinecraft()).player.rotationPitch))).rotateYaw(-((float)Math.toRadians((Minecraft.getMinecraft()).player.rotationYaw)));
    drawLineFromPosToPos(vec3d.x, vec3d.y + mc.player.getEyeHeight(), vec3d.z, paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramFloat1, paramFloat2, paramFloat3, paramFloat4);
  }
  
  public void onWorld(RenderEvent paramRenderEvent) {
    if (this.tracers.getValBoolean()) {
      GlStateManager.pushMatrix();
      for (BoundingSpot boundingSpot : boxes)
        drawTracer(boundingSpot.x, boundingSpot.y, boundingSpot.z, 0.98F, 1.0F, 0.0F, 1.0F); 
      GlStateManager.popMatrix();
    } 
  }
  
  public static Vec3d getInterpolatedAmount(double paramDouble1, double paramDouble2, double paramDouble3) {
    return new Vec3d((paramDouble1 - paramDouble1) * paramDouble1, (paramDouble2 - paramDouble2) * paramDouble2, (paramDouble3 - paramDouble3) * paramDouble3);
  }
  
  public void onUpdate() {
    if (this.waypoints.getValBoolean())
      try {
        boxes.removeIf(paramBoundingSpot -> (mc.player.getDistance(paramBoundingSpot.x, paramBoundingSpot.y, paramBoundingSpot.z) <= this.clearrange.getValDouble()));
      } catch (ConcurrentModificationException concurrentModificationException) {
        concurrentModificationException.printStackTrace();
      }  
  }
  
  public static Vec3d getInterpolatedAmount(double paramDouble) {
    return getInterpolatedAmount(paramDouble, paramDouble, paramDouble);
  }
  
  public static double[] interpolate(double paramDouble1, double paramDouble2, double paramDouble3) {
    double d1 = interpolate(paramDouble1, paramDouble1) - (mc.getRenderManager()).renderPosX;
    double d2 = interpolate(paramDouble2, paramDouble2) - (mc.getRenderManager()).renderPosY;
    double d3 = interpolate(paramDouble3, paramDouble3) - (mc.getRenderManager()).renderPosZ;
    return new double[] { d1, d2, d3 };
  }
  
  public static double interpolate(double paramDouble1, double paramDouble2) {
    return paramDouble2 + (paramDouble1 - paramDouble2) * mc.getRenderPartialTicks();
  }
  
  public static void drawLineFromPosToPos(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, double paramDouble5, double paramDouble6, double paramDouble7, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4) {
    GL11.glBlendFunc(770, 771);
    GL11.glEnable(3042);
    GL11.glLineWidth(1.5F);
    GL11.glDisable(3553);
    GL11.glDisable(2929);
    GL11.glDepthMask(false);
    GL11.glColor4f(paramFloat1, paramFloat2, paramFloat3, paramFloat4);
    GlStateManager.disableLighting();
    GL11.glLoadIdentity();
    mc.entityRenderer.orientCamera(mc.getRenderPartialTicks());
    GL11.glBegin(1);
    GL11.glVertex3d(paramDouble1, paramDouble2, paramDouble3);
    GL11.glVertex3d(paramDouble4, paramDouble5, paramDouble6);
    GL11.glVertex3d(paramDouble4, paramDouble5, paramDouble6);
    GL11.glVertex3d(paramDouble4, paramDouble5 + paramDouble7, paramDouble6);
    GL11.glEnd();
    GL11.glEnable(3553);
    GL11.glEnable(2929);
    GL11.glDepthMask(true);
    GL11.glDisable(3042);
    GL11.glColor3d(1.0D, 1.0D, 1.0D);
    GlStateManager.enableLighting();
  }
  
  static {
    sent = new ArrayList<>();
  }
  
  public static void drawTracer(double paramDouble1, double paramDouble2, double paramDouble3, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4) {
    double[] arrayOfDouble = interpolate(paramDouble1, paramDouble2, paramDouble3);
    drawLine(arrayOfDouble[0], arrayOfDouble[1], arrayOfDouble[2], 2.0D, paramFloat1, paramFloat2, paramFloat3, paramFloat4);
  }
  
  public static Vec3d getInterpolatedPos(double paramDouble1, double paramDouble2, double paramDouble3, float paramFloat) {
    return (new Vec3d(paramDouble1, paramDouble2, paramDouble3)).add(getInterpolatedAmount(paramDouble1, paramDouble2, paramDouble3));
  }
  
  public static Vec3d getInterpolatedRenderPos(double paramDouble1, double paramDouble2, double paramDouble3, float paramFloat) {
    return getInterpolatedPos(paramDouble1, paramDouble2, paramDouble3, paramFloat).subtract((mc.getRenderManager()).renderPosX, (mc.getRenderManager()).renderPosY, (mc.getRenderManager()).renderPosZ);
  }
}
