//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "1.12 stable mappings"!

package me.fluffycq.icehack.module.modules.exploit;

import me.fluffycq.icehack.message.Messages;
import me.fluffycq.icehack.module.Category;
import me.fluffycq.icehack.module.Module;
import me.fluffycq.icehack.setting.Setting;
import net.minecraft.block.Block;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.passive.AbstractChestHorse;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.util.EnumHand;

public class AutoMount extends Module {
  public void onEnable() {
    if (mc.world == null || mc.world.loadedEntityList == null)
      return; 
    if ((getChestSlot() == -1 || getChestSlot() > 8 || getChestSlot() < 0) && this.chestbypass.getValBoolean()) {
      Messages.sendChatMessage("No chest in hotbar smh");
      disable();
      return;
    } 
  }
  
  public AutoMount() {
    super("AutoMount", 0, Category.EXPLOITS);
  }
  
  public void onUpdate() {
    if (mc.world == null || mc.world.loadedEntityList == null)
      return; 
    if ((getChestSlot() == -1 || getChestSlot() > 8 || getChestSlot() < 0) && this.chestbypass.getValBoolean()) {
      Messages.sendChatMessage("No chest in hotbar smh");
      disable();
      return;
    } 
    int i = mc.player.inventory.currentItem;
    mc.player.inventory.currentItem = getChestSlot();
    if (this.mount.getValBoolean() && getNearest() != null) {
      MountBypass.ignoring = true;
      if (this.weird.getValBoolean()) {
        mc.playerController.interactWithEntity((EntityPlayer)mc.player, (Entity)getNearest(), EnumHand.MAIN_HAND);
      } else {
        mc.playerController.interactWithEntity((EntityPlayer)mc.player, (Entity)getNearest(), getNearest().rayTrace(mc.player.getDistance((Entity)getNearest()), (getNearest()).ticksExisted), EnumHand.MAIN_HAND);
      } 
      mc.playerController.interactWithEntity((EntityPlayer)mc.player, (Entity)getNearest(), EnumHand.MAIN_HAND);
      MountBypass.ignoring = false;
      mc.player.connection.sendPacket((Packet)new CPacketUseEntity((Entity)getNearest(), EnumHand.MAIN_HAND));
    } 
    mc.player.inventory.currentItem = i;
    if (this.mounttwice.getValBoolean() && getNearest() != null && getNearest().getPositionVector() != null)
      if (this.weird.getValBoolean()) {
        mc.playerController.interactWithEntity((EntityPlayer)mc.player, (Entity)getNearest(), EnumHand.MAIN_HAND);
      } else {
        mc.playerController.interactWithEntity((EntityPlayer)mc.player, (Entity)getNearest(), getNearest().rayTrace(mc.player.getDistance((Entity)getNearest()), (getNearest()).ticksExisted), EnumHand.MAIN_HAND);
      }  
    disable();
  }
  
  public AbstractChestHorse getNearest() {
    AbstractChestHorse abstractChestHorse = null;
    for (Entity entity : mc.world.loadedEntityList) {
      if (!(entity instanceof EntityLivingBase) || mc.player.getDistance(entity) > 5.0F || ((EntityLivingBase)entity).getHealth() <= 0.0F || !(entity instanceof AbstractChestHorse))
        continue; 
      abstractChestHorse = (AbstractChestHorse)entity;
    } 
    return abstractChestHorse;
  }
  
  public int getChestSlot() {
    byte b = -1;
    for (byte b1 = 0; b1 < 9; b1++) {
      ItemStack itemStack = mc.player.inventory.getStackInSlot(b1);
      if (itemStack != ItemStack.EMPTY && itemStack.getItem() instanceof ItemBlock) {
        Block block = ((ItemBlock)itemStack.getItem()).getBlock();
        if (block instanceof net.minecraft.block.BlockChest) {
          b = b1;
          break;
        } 
      } 
    } 
    return b;
  }
}
