//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "1.12 stable mappings"!

package me.fluffycq.icehack.module.modules.exploit;

import me.fluffycq.icehack.message.Messages;
import me.fluffycq.icehack.module.Category;
import me.fluffycq.icehack.module.Module;
import me.fluffycq.icehack.setting.Setting;
import net.minecraft.block.Block;
import net.minecraft.client.Minecraft;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.ClickType;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.Vec3d;

public class AutoDupe extends Module {
  public void openDonkeyInv() {
    if (mc.player.ridingEntity != null)
      mc.player.sendHorseInventory(); 
  }
  
  public void onDisable() {
    this.tick = 0;
    this.timesDuped = 0;
    this.movedAmt = 0;
    this.movedTime = 0L;
    this.dropTime = 0L;
    this.startYaw = 0;
    this.putChestOn = false;
    this.donkeyFilled = false;
    this.hasOpenedInv = false;
    this.hasDuped = false;
    this.donkeyEmpty = false;
    this.closedInv = false;
    this.canstartDropping = false;
  }
  
  public void onEnable() {
    if (mc == null || mc.player == null || mc.world == null) {
      disable();
    } else {
      mc.player.rotationPitch = (float)this.dupepitch.getValDouble();
      this.startYaw = (int)mc.player.rotationYaw;
    } 
    byte b1 = 0;
    for (byte b2 = 0; b2 < 45; b2++) {
      if (((Slot)mc.player.openContainer.inventorySlots.get(b2)).getStack().getItem() instanceof net.minecraft.item.ItemShulkerBox && ((Slot)mc.player.openContainer.inventorySlots.get(b2)).getStack().getItem() != null)
        b1++; 
    } 
    if (b1 < 17) {
      Messages.sendChatMessage("You don't have enough shulkers! Try filling up your whole inventory + 1 stack of chests.");
      disable();
    } 
    this.tick = 0;
    this.timesDuped = 0;
    this.movedAmt = 0;
    this.movedTime = 0L;
    this.dropTime = 0L;
    this.putChestOn = false;
    this.donkeyFilled = false;
    this.hasOpenedInv = false;
    this.hasDuped = false;
    this.donkeyEmpty = false;
    this.closedInv = false;
    this.canstartDropping = false;
  }
  
  public void onUpdate() {
    if (mc == null || mc.player == null || mc.world == null)
      return; 
    this.tick++;
    if (this.tick >= this.startdelay.getValDouble() && !this.hasOpenedInv && mc.player.ridingEntity != null) {
      mc.player.rotationPitch = (float)this.dupepitch.getValDouble();
      mc.player.rotationYaw = this.startYaw;
      openDonkeyInv();
      this.hasOpenedInv = true;
    } 
    while (!this.donkeyFilled && mc.currentScreen instanceof net.minecraft.client.gui.inventory.GuiScreenHorseInventory && this.hasOpenedInv) {
      for (byte b = 16; b < 52; b++) {
        if (((Slot)mc.player.openContainer.inventorySlots.get(b)).getStack().getItem() instanceof net.minecraft.item.ItemShulkerBox && ((Slot)mc.player.openContainer.inventorySlots.get(b)).getStack().getItem() != null) {
          if (this.movedTime == 0L) {
            this.movedTime = System.currentTimeMillis();
            this.movedAmt++;
            mc.playerController.windowClick(mc.player.openContainer.windowId, b, 0, ClickType.QUICK_MOVE, (EntityPlayer)mc.player);
          } 
          if ((System.currentTimeMillis() - this.movedTime) >= this.movedelay.getValDouble()) {
            this.movedTime = System.currentTimeMillis();
            this.movedAmt++;
            mc.playerController.windowClick(mc.player.openContainer.windowId, b, 0, ClickType.QUICK_MOVE, (EntityPlayer)mc.player);
          } 
          if (this.movedAmt >= 15) {
            this.donkeyFilled = true;
            this.tick = 100;
            break;
          } 
          return;
        } 
      } 
    } 
    if (this.donkeyFilled && this.hasOpenedInv && !this.hasDuped)
      for (Entity entity : (Minecraft.getMinecraft()).world.loadedEntityList) {
        if (entity instanceof EntityLivingBase && entity != (Minecraft.getMinecraft()).player && ((EntityLivingBase)entity).getHealth() > 0.0F && (Minecraft.getMinecraft()).player.getDistance(entity) <= 2.5D && entity instanceof net.minecraft.entity.passive.AbstractChestHorse) {
          MountBypass.ignoring = true;
          Vec3d vec3d = new Vec3d(entity.posX, entity.posY, entity.posZ);
          mc.player.connection.sendPacket((Packet)new CPacketUseEntity(entity, EnumHand.MAIN_HAND, vec3d));
          MountBypass.ignoring = false;
          this.hasDuped = true;
        } 
      }  
    if (!this.canstartDropping && this.tick >= 100.0D + this.startdropdelay.getValDouble())
      this.canstartDropping = true; 
    while (!this.donkeyEmpty && mc.currentScreen instanceof net.minecraft.client.gui.inventory.GuiScreenHorseInventory && this.hasOpenedInv && this.hasDuped && this.donkeyFilled && mc.player.getRidingEntity() instanceof net.minecraft.entity.passive.AbstractHorse && mc.player.openContainer instanceof net.minecraft.inventory.ContainerHorseInventory && this.canstartDropping) {
      for (byte b = 2; b < 17; b++) {
        if (((Slot)mc.player.openContainer.inventorySlots.get(b)).getStack().getItem() instanceof net.minecraft.item.ItemShulkerBox && ((Slot)mc.player.openContainer.inventorySlots.get(b)).getStack().getItem() != null) {
          if (this.dropTime == 0L) {
            this.dropTime = System.currentTimeMillis();
            mc.playerController.windowClick(mc.player.openContainer.windowId, b, 0, ClickType.PICKUP, (EntityPlayer)mc.player);
            mc.playerController.windowClick(mc.player.openContainer.windowId, -999, 0, ClickType.PICKUP, (EntityPlayer)mc.player);
          } 
          if ((System.currentTimeMillis() - this.dropTime) >= this.dropdelay.getValDouble()) {
            this.dropTime = System.currentTimeMillis();
            mc.playerController.windowClick(mc.player.openContainer.windowId, b, 0, ClickType.PICKUP, (EntityPlayer)mc.player);
            mc.playerController.windowClick(mc.player.openContainer.windowId, -999, 0, ClickType.PICKUP, (EntityPlayer)mc.player);
          } 
          return;
        } 
      } 
      this.donkeyEmpty = true;
    } 
    if (this.donkeyEmpty && this.hasDuped && this.donkeyFilled && this.hasOpenedInv && !this.closedInv) {
      mc.player.closeScreen();
      this.tick = 300;
      this.closedInv = true;
    } 
    if (this.closedInv && this.tick >= 300.0D + this.dismountdelay.getValDouble()) {
      dismount();
      if (findChests() != -1) {
        mc.player.inventory.currentItem = findChests();
      } else {
        Messages.sendChatMessage("You don't have any chests in your hotbar!");
        disable();
      } 
      this.tick = 0;
      this.timesDuped = 0;
      this.movedAmt = 0;
      this.movedTime = 0L;
      this.dropTime = 0L;
      this.putChestOn = false;
      this.donkeyFilled = false;
      this.hasOpenedInv = false;
      this.hasDuped = false;
      this.donkeyEmpty = false;
      this.closedInv = false;
      this.canstartDropping = false;
    } 
  }
  
  public AutoDupe() {
    super("AutoDupe", 0, Category.EXPLOITS);
  }
  
  public int findChests() {
    byte b = -1;
    for (byte b1 = 0; b1 < 9; b1++) {
      ItemStack itemStack = mc.player.inventory.getStackInSlot(b1);
      if (itemStack != ItemStack.EMPTY && itemStack.getItem() instanceof ItemBlock) {
        Block block = ((ItemBlock)itemStack.getItem()).getBlock();
        if (block instanceof net.minecraft.block.BlockChest) {
          b = b1;
          break;
        } 
      } 
    } 
    return b;
  }
  
  public void dismount() {
    mc.player.dismountRidingEntity();
    mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)mc.player, CPacketEntityAction.Action.START_SNEAKING));
  }
}
